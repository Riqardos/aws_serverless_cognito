app: richard-python-serverless
service: rk-cognito-sls
frameworkVersion: "2"

provider:
  name: aws
  runtime: python3.8
  lambdaHashingVersion: "20201221"
  region: eu-central-1
  stage: dev
  iam:
    role: loggingParameterRole
  tracing: # x-ray
    apiGateway: true
    lambda: true
  layers:
    - Ref: PythonRequirementsLambdaLayer
  apiGateway:
    usagePlan:
      - free:
          quota:
            limit: 100
            offset: 0
            period: DAY
          throttle:
            burstLimit: 5
            rateLimit: 5
package:
  patterns:
    - '!node_modules/**'
    - '!src/schemas/**'
    - '!frontend/**'
    - '!package**'
    

functions:
  signUp:
    handler: src/functions/signUp.handler
    events:
      - http:
          path: /signup/
          method: post
          cors: true
          request:
            schemas:
              application/json: ${file(src/schemas/signUp-request.json)}
  
  confirmSignUp:
    handler: src/functions/confirmSignUp.handler
    events:
      - http:
          path: /signup/confirm/
          method: post
          cors: true
          request:
            schemas:
              application/json: ${file(src/schemas/confirmSignUp-request.json)}
  
  listUsers:
    handler: src/functions/listUsers.handler
    events:
      - http:
          path: /users/
          method: get
          cors: true
          authorizer:
            type: COGNITO_USER_POOLS
            authorizerId: !Ref apiGatewayAuthorizer
    role: listUsersRole
  
  login:
    handler: src/functions/login.handler
    events:
      - http:
          path: /login/
          method: post
          cors: true
          request:
            schemas:
              application/json: ${file(src/schemas/login-request.json)}
  
  forgotPassword:
    handler: src/functions/forgotPassword.handler
    events:
      - http:
          path: /login/password/reset/
          method: post
          cors: true
          request:
            schemas:
              application/json: ${file(src/schemas/forgotPassword-request.json)}
  
  confirmForgotPassword:
    handler: src/functions/confirmForgotPassword.handler
    events:
      - http:
          path: /login/password/reset/confirm/
          method: post
          cors: true
          request:
            schemas:
              application/json: ${file(src/schemas/confirmForgotPassword-request.json)}
  
  refreshToken:
    handler: src/functions/refreshToken.handler
    events:
      - http:
          path: /login/refreshToken/
          method: post
          cors: true
          request:
            schemas:
              application/json: ${file(src/schemas/refresh-request.json)}

  resendVerificationCode:
    handler: src/functions/resendVerificationCode.handler
    events:
      - http:
          path: /signup/resendCode/
          cors: true
          method: post

resources:
  Resources:
    cognitoUserPool:
      Type: AWS::Cognito::UserPool
      Properties:
        UserPoolName: ${self:service}-user-pool
        AutoVerifiedAttributes:
          - email
        Schema:
          - Name: email
            AttributeDataType: String
            Mutable: true
            Required: true

    cognitoUserPoolClient:
      Type: AWS::Cognito::UserPoolClient
      Properties:
        ClientName: "rk-sls-test"
        ExplicitAuthFlows:
          - ALLOW_USER_PASSWORD_AUTH
          - ALLOW_REFRESH_TOKEN_AUTH
        UserPoolId: !Ref cognitoUserPool

    apiGatewayAuthorizer:
      Type: AWS::ApiGateway::Authorizer
      Properties:
        AuthorizerResultTtlInSeconds: 10
        IdentitySource: method.request.header.Authorization
        Name: apiGatewayAuthorizer
        RestApiId:
          Ref: ApiGatewayRestApi
        Type: COGNITO_USER_POOLS
        ProviderARNs:
          - !GetAtt "cognitoUserPool.Arn"

    clientAppIdParameter:
      Type: AWS::SSM::Parameter
      Properties:
        Description: clientAppId
        Name: /${self:service}/clientAppId
        Tier: Standard
        Type: String
        Value: !Ref cognitoUserPoolClient

    cognitoUserPoolIdParameter:
      Type: AWS::SSM::Parameter
      Properties:
        Description: cognitoUserPoolId
        Name: /${self:service}/cognitoUserPoolId
        Tier: Standard
        Type: String
        Value: !Ref cognitoUserPool

    gatewayResponse:
      Type: "AWS::ApiGateway::GatewayResponse"
      Properties:
        ResponseParameters:
          gatewayresponse.header.Access-Control-Allow-Origin: "'*'"
          gatewayresponse.header.Access-Control-Allow-Headers: "'*'"
        ResponseType: DEFAULT_4XX
        RestApiId:
          Ref: ApiGatewayRestApi
        StatusCode: "401"

    listUsersPolicy:
      Type: AWS::IAM::ManagedPolicy
      Properties:
        PolicyDocument:
          Version: "2012-10-17"
          Statement:
            - Effect: Allow
              Action:
                - cognito-idp:ListUsers
              Resource: !GetAtt "cognitoUserPool.Arn"
    loggingPolicy:
      Type: AWS::IAM::ManagedPolicy
      Properties:
        PolicyDocument:
          Version: "2012-10-17"
          Statement:
            - Effect: "Allow" # xray permissions (required)
              Action:
                - "xray:PutTraceSegments"
                - "xray:PutTelemetryRecords"
              Resource:
                - Fn::Sub: arn:aws:xray:${self:provider.region}:${AWS::AccountId}:group/${self:custom.xrayGroupName}
            - Effect: Allow
              Action:
                - logs:CreateLogGroup
                - logs:CreateLogStream
                - logs:PutLogEvents
              Resource:
                - Fn::Sub: arn:aws:logs:${self:provider.region}:${AWS::AccountId}:log-group:/aws/lambda/*:*
    
    SSMPolicy:
      Type: AWS::IAM::ManagedPolicy
      Properties:
        PolicyDocument:
          Version: "2012-10-17"
          Statement:
            - Effect: Allow
              Action:
                - ssm:GetParameter
              Resource:
                - Fn::Sub: arn:aws:ssm:${self:provider.region}:${AWS::AccountId}:parameter/${self:service}/*
    
    listUsersRole:
      Type: AWS::IAM::Role
      Properties:
        RoleName: ${sls:instanceId}-role-listUsers
        AssumeRolePolicyDocument:
          Version: "2012-10-17"
          Statement:
            - Effect: Allow
              Principal:
                Service:
                  - lambda.amazonaws.com
              Action: sts:AssumeRole
        ManagedPolicyArns:
          - !Ref listUsersPolicy
          - !Ref loggingPolicy
          - !Ref SSMPolicy

    loggingParameterRole:
      Type: AWS::IAM::Role
      Properties:
        RoleName: ${sls:instanceId}-role-logging
        AssumeRolePolicyDocument:
          Version: "2012-10-17"
          Statement:
            - Effect: Allow
              Principal:
                Service:
                  - lambda.amazonaws.com
              Action: sts:AssumeRole
        ManagedPolicyArns:
          - !Ref loggingPolicy
          - !Ref SSMPolicy
    xrayGroup:
      Type: AWS::XRay::Group
      Properties: 
        GroupName: ${self:custom.xrayGroupName}
        FilterExpression: "duration > 10"
  
  Outputs:
    cognitoUserPoolArn:
      Export:
        Name: cognitoUserPool-Arn
      Value:
        "Fn::GetAtt": [cognitoUserPool, Arn]
    cognitoUserPoolId:
      Export:
        Name: cognitoUserPoolId
      Value: !Ref cognitoUserPool
    cognitoUserPoolClientId:
      Export:
        Name: cognitoUserPoolClientId
      Value: !Ref cognitoUserPoolClient
    
plugins:
  - serverless-python-requirements
  - serverless-finch

custom:
  xrayGroupName: ${self:service}-xray-group
  pythonRequirements:
    dockerizePip: true
    layer:
      name: ${self:service}-layer
      description: "Layer with libraries"
      compatibleRuntimes:
        - ${self:provider.runtime}
  client:
    bucketName: ${self:service}-bucket
    distributionFolder: frontend/build